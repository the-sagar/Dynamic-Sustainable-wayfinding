apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 30
    buildToolsVersion '29.0.3'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    aaptOptions {
        cruncherEnabled = false
    }

    // This enables long timeouts required on slow environments, e.g. Travis
    int adb_timeout_min = 10
    adbOptions {
        timeOutInMs adb_timeout_min * 60 * 1000
        installOptions "-d","-t"
    }

//    def tm_abi_tegola_bin_mapping_PropsFile = file('tm_abi_tegola_version.properties')
//    Properties tm_abi_tegola_bin_mapping_Props = new Properties()
//    StringBuilder sb_tegola_bin_abi_map = new StringBuilder()
//    if (tm_abi_tegola_bin_mapping_PropsFile.canRead()) {
//        sb_tegola_bin_abi_map.append("{{")
//        tm_abi_tegola_bin_mapping_Props.load(new FileInputStream(tm_abi_tegola_bin_mapping_PropsFile))
//        Set<String> tegola_bin_fnames = tm_abi_tegola_bin_mapping_Props.keySet()
//        if (tegola_bin_fnames != null && tegola_bin_fnames.size() > 0) {
//            for (String tegola_bin_fname : tegola_bin_fnames) {
//                //println tm_abi_tegola_bin_mapping_PropsFile.getName() + " - found key (tegola_bin_fname): " + tegola_bin_fname
//                String abi_list = tm_abi_tegola_bin_mapping_Props[tegola_bin_fname]
//                //println "\tabi_list:"
//                String[] abis = abi_list.split(",")
//                if (abis != null && abis.length > 0) {
//                    sb_tegola_bin_abi_map.append("put(\"" + tegola_bin_fname + "\", new String[]{")
//                    for (int i = 0; i < abis.length; i++) {
//                        String abi = abis[i]
//                        //println "\t\t" + abi
//                        sb_tegola_bin_abi_map.append("\"" + abi + "\"")
//                        if (i < (abis.length - 1))
//                            sb_tegola_bin_abi_map.append(",")
//                    }
//                    sb_tegola_bin_abi_map.append("});")
//                }
//            }
//        }
//        sb_tegola_bin_abi_map.append("}}")
//        //println "tegola_bin_abi_map hashmap string: " + sb_tegola_bin_abi_map.toString()
//    } else
//        throw new GradleException("Could not read tm_abi_tegola_version.properties! Did you run ./src/main/tegola-bin-buildscripts/linux/rebuild_tegola_android_all.sh ?")

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        vectorDrawables.useSupportLibrary = true

//        buildConfigField "java.util.Map<String, String[]>", "tegola_bin_abi_map", "new java.util.HashMap<String, String[]>() " + sb_tegola_bin_abi_map.toString()

        ndk {
            abiFilters 'arm64-v8a', 'x86_64'
        }

        sourceSets.main {
            jni.srcDirs = []
            jniLibs.srcDir "$projectDir/src/main/libs"
        }
    }

    externalNativeBuild {
//        cmake {
//            path 'src/main/jni/CMakeLists.txt'
//        }
        ndkBuild {
           path 'src/main/jni/Android.mk'
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
        }
        debug_proguard {
            initWith debug
            signingConfig signingConfigs.debug
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.debug.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'com.squareup.okhttp3:okhttp:3.14.4'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.13.1'
}
